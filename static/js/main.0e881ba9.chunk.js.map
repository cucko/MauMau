{"version":3,"sources":["model/Card.ts","methods/DeckMethods.ts","config/gameConfig.ts","methods/PlayerMethods.ts","methods/GameMethods.ts","components/CardBackground.tsx","components/Card.tsx","components/Home.tsx","components/Layout.tsx","components/Player.tsx","components/Header.tsx","reducer/gameReducer.ts","components/Log.tsx","components/Status.tsx","components/Stack.tsx","components/Loading.tsx","components/Advanced.tsx","components/Spectator.tsx","components/Basic.tsx","components/Game.tsx","components/TestDeck.tsx","components/withTracker.tsx","App.tsx","registerServiceWorker.js","index.tsx"],"names":["Suit","Rank","getCardTypeProps","type","hearts","text","color","diamonds","clubs","spades","rankLetterMap","two","three","four","five","six","seven","eight","nine","ten","ace","jack","queen","king","cardToString","card","rank","suit","generateDeck","resetFirebaseState","deck","Array","resetServerState","isNaN","Number","push","shuffleCards","array","i","length","j","Math","floor","random","getCardFromDrawStack","remaining","playerNames","firebaseConfig","authDomain","databaseURL","hasCpuPlayers","setHasCpuPlayers","newVal","getHasCpuPlayers","drawStartupCards","drawStack","cards","index","drawed","splice","createPlayer","name","cpu","id","toString","findPlayableCard","currentCard","playerCards","find","pc","createLogItem","player","action","timestamp","Date","createLogItemInfo","initializeStartState","initDeck","loggedItems","players","names","forEach","map","c","join","createPlayers","burnedStack","alert","Error","initializeFirstBurnedCard","currentPlayer","turn","round","isFinished","isLoading","error","initialGameState","getLastCardInBurnedStack","getTotalCards","state","total","getGameStatus","status","p","getCurrentPlayer","getLastActionType","CardBackground","props","className","xmlns","viewBox","version","fill","stroke","d","fillRule","strokeMiterlimit","transform","valueProps","scale","fontSize","fontWeight","textAnchor","dominantBaseline","Card","_rank","hide","style","rotate","getStyleFromRotate","onClick","onCardSelected","x","y","Home","withRouter","useState","gameState","set_gameState","getRotationZ","n","to","key","href","width","height","src","alt","Layout","this","children","Component","Player","isPlayable","selected","Header","location","pathname","substr","history","goBack","showStartButtons","onStartGame","autoPlay","onNextTurn","hidden","toggleAutoplay","delay","max","step","min","value","onChange","onDelayChange","gameReducer","filter","logItemsToAdd","newstateBurn","newstateDraw","Log","log","useRef","useEffect","current","scrollTop","scrollHeight","ref","l","toLocaleTimeString","replace","Status","Stack","lastActionType","toLowerCase","Loading","strokeWidth","cx","cy","r","strokeOpacity","attributeName","begin","dur","values","calcMode","repeatCount","Advanced","set_autoPlay","set_delay","useReducer","dispatch","dispatchWrapper","timeout","setTimeout","document","getElementById","click","clearTimeout","doTurn","playableCard","onDrawCardFromPile","drawedCard","enabled","e","parseInt","target","Spectator","Firebase","on","snapshot","val","item","off","Basic","logger","Game","TestDeck","set_cards","onGenerateDeck","interval","setInterval","querySelectorAll","getRandomCard","classList","add","remove","clearInterval","ReactGA","initialize","withTracker","WrappedComponent","options","trackPage","page","set","pageview","App","withTrackerWrapper","Page","Wrapper","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","catch","baseUrl","getElementsByTagName","getAttribute","rootElement","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0e881ba9.chunk.js","sourcesContent":["export interface ICard {\r\n    rank: Rank,\r\n    suit: Suit\r\n}\r\n\r\nexport enum Suit {\r\n    hearts = 'hearts',\r\n    diamonds = 'diamonds',\r\n    clubs = 'clubs',\r\n    spades = 'spades'\r\n}\r\n\r\n// returns color and \r\nexport const getCardTypeProps = (type: Suit): ICardTypeProps => {\r\n    switch (type) {\r\n      case Suit.hearts: return { text: '♥', color: 'red' };\r\n      case Suit.diamonds: return { text: '♦️', color: 'red' };\r\n      case Suit.clubs: return { text: '♣', color: 'black' };\r\n      case Suit.spades: return { text: '♠️', color: 'black' };\r\n    }\r\n  }\r\n\r\nexport enum Rank {\r\n    two = 'two',\r\n    three = 'three',\r\n    four = 'four',\r\n    five = 'five',\r\n    six = 'six',\r\n    seven = 'seven',\r\n    eight = 'eight',\r\n    nine = 'nine',\r\n    ten = 'ten',\r\n    ace = 'ace',\r\n    jack = 'jack',\r\n    queen = 'queen',\r\n    king = 'king',\r\n}\r\n\r\ninterface IRankLetterMap {\r\n    [key: string]: string\r\n}\r\nexport const rankLetterMap: IRankLetterMap = {\r\n    two: '2',\r\n    three: '3',\r\n    four: '4',\r\n    five: '5',\r\n    six: '6',\r\n    seven: '7',\r\n    eight: '8',\r\n    nine: '9',\r\n    ten: '10',  \r\n    ace: 'A',\r\n    jack: 'J',\r\n    queen: 'Q',\r\n    king: 'K'\r\n}\r\n\r\nexport interface ICardTypeProps {\r\n    text: string\r\n    color: string,\r\n}\r\n\r\nexport const cardToString = (card:ICard) :string => card.rank + ' of ' + card.suit;\r\n","import { ICard, Rank, Suit } from \"../model/Card\"\r\nimport { resetServerState } from \"./GameMethods\";\r\n\r\nexport const generateDeck = (resetFirebaseState = true): Array<ICard> => {\r\n  let deck = new Array<ICard>();\r\n  \r\n  if (resetFirebaseState)\r\n    resetServerState();\r\n\r\n  for (const suit in Suit) {\r\n    if (isNaN(Number(suit))) {\r\n      for (const rank in Rank) {\r\n        if (isNaN(Number(rank))) {\r\n          deck.push({ rank: rank as Rank, suit: suit as Suit });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  deck = shuffleCards(deck);\r\n  return deck;\r\n}\r\n\r\nexport const shuffleCards = (array: Array<ICard>) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nexport const initializeFirstBurnedCard = (drawStack: Array<ICard>): Array<ICard> => {\r\n  const card = getCardFromDrawStack(drawStack);\r\n  drawStack.splice(0, 1);\r\n  if (!card) {\r\n    alert('Cannot draw the starting card.');\r\n    throw (new Error('Cannot draw the starting card.'));\r\n  }\r\n  else return [card];\r\n}\r\n\r\nexport const getCardFromDrawStack = (remaining: Array<ICard>): ICard | null => {\r\n  if (remaining.length > 0)\r\n    return remaining[0];//.splice(0, 1)[0];\r\n  else return null;\r\n}\r\n\r\n\r\n","// if enabled, will send the game state to firebase realtime database\r\n// and to enable Spectator mode\r\n// leave it to false since the Firebase DB Api Secret key is removed from the server code\r\nexport const enableServerLog = false;\r\n\r\n// enable this to use the dotnet core server for state management\r\n// *** MauController has thread.sleep(3-5sec) to simulate slow server and to show the loading on client ***\r\nexport const useServerState = false;\r\n\r\n//leave empty if the dotnet core server is on same host:port\r\nexport const apiHost = ''; \r\n\r\n\r\nexport const GAtrackingID = 'UA-905594-21';\r\n\r\nexport const playerNames = ['Alice', 'Bob', 'Carol', 'Eva'];\r\n\r\nexport const numberOfCardsAtStart = 7;\r\n\r\nexport const firebaseConfig = {\r\n  // apiKey: \"\",  // not needed for client app\r\n  authDomain: \"arduinioio.firebaseio.com/\",\r\n  databaseURL: \"https://arduinioio.firebaseio.com/\",\r\n}\r\n\r\n// TODO: put this setting in gameState object\r\nlet hasCpuPlayers = false;\r\nexport const setHasCpuPlayers = (newVal: boolean) => hasCpuPlayers = newVal;\r\nexport const getHasCpuPlayers = () => hasCpuPlayers;\r\n","import { ICard, rankLetterMap, getCardTypeProps } from \"../model/Card\";\r\nimport { getCardFromDrawStack } from \"./DeckMethods\";\r\nimport { IPlayer } from \"../model/Player\";\r\nimport { numberOfCardsAtStart, getHasCpuPlayers } from \"../config/gameConfig\"; \r\nimport { ILog } from \"../model/Game\";\r\nimport { createLogItem } from \"./GameMethods\";\r\n\r\nexport const createPlayers = (names: Array<string>, drawStack: Array<ICard>, loggedItems: Array<ILog>): Array<IPlayer> => {\r\n    const players = new Array<IPlayer>();\r\n    names.forEach((name, i) => {\r\n        const player = createPlayer(i, name, drawStack, getHasCpuPlayers() && i > 0);\r\n        players.push(player);\r\n\r\n        loggedItems.push(createLogItem(player, ` has been dealt: ` + player.cards.map(c =>\r\n            (rankLetterMap[c.rank] + getCardTypeProps(c.suit).text)\r\n        ).join(' '), null))\r\n    })\r\n    return players;\r\n}\r\n\r\nexport const drawStartupCards = (drawStack: Array<ICard>) => {\r\n    const cards = new Array<ICard>();\r\n    for (let index = 0; index < numberOfCardsAtStart; index++) {\r\n        // if there are no more cards return\r\n        const drawed = getCardFromDrawStack(drawStack);\r\n        if (!drawed)\r\n            break;\r\n        else {\r\n            cards.push(drawed);\r\n            drawStack.splice(0, 1);\r\n        }\r\n    }\r\n    return cards;\r\n}\r\n\r\nexport const createPlayer = (i: number, name: string, drawStack: Array<ICard>, cpu = false): IPlayer => (\r\n    {\r\n        id: i.toString(),\r\n        index: i,\r\n        name: name,\r\n        cards: drawStartupCards(drawStack),\r\n        cpu: cpu\r\n    }\r\n)\r\n\r\nexport const findPlayableCard = (currentCard: ICard, playerCards: Array<ICard>): ICard | undefined => {\r\n    return playerCards.find(pc => pc.suit === currentCard.suit || pc.rank === currentCard.rank);\r\n}","import { ICard } from \"../model/Card\"\r\nimport { IPlayer } from \"../model/Player\";\r\nimport { generateDeck, initializeFirstBurnedCard } from \"./DeckMethods\";\r\nimport { ILog, IGameState } from \"../model/Game\";\r\nimport { createPlayers } from \"./PlayerMethods\";\r\nimport { playerNames, apiHost, enableServerLog } from \"../config/gameConfig\";\r\n\r\nexport const createLogItem = (player: IPlayer | null, action: string, card: ICard | null): ILog => ({\r\n    timestamp: new Date(), \r\n    player,\r\n    action,\r\n    card\r\n})\r\n\r\nconst createLogItemInfo = (action: string) => createLogItem(null, action, null);\r\n\r\nexport const initializeStartState = (): IGameState => {\r\n    const initDeck = generateDeck();\r\n    const loggedItems = [createLogItemInfo('Deck is generated and shuffled')];\r\n    const players = createPlayers(playerNames, initDeck, loggedItems);\r\n    const burnedStack = initializeFirstBurnedCard(initDeck);\r\n\r\n    loggedItems.push(createLogItem(null, `Starting game with`, burnedStack[0]));\r\n\r\n    loggedItems.push(createLogItemInfo(`First card is ${burnedStack[0].rank} of ${burnedStack[0].suit}`));\r\n\r\n    const currentPlayer = Math.floor(Math.random() * playerNames.length);\r\n    loggedItems.push(createLogItem(players[currentPlayer], `starts first`, null));\r\n\r\n    return {\r\n        drawStack: initDeck,\r\n        players: players,\r\n        burnedStack: burnedStack,\r\n        currentPlayer: currentPlayer,\r\n        turn: 0,\r\n        round: 0,\r\n        loggedItems: loggedItems,\r\n        isFinished: false,\r\n        isLoading: false,\r\n        error: ''\r\n    }\r\n}\r\n\r\nexport const initialGameState: IGameState = {\r\n    burnedStack: [] as Array<ICard>,\r\n    drawStack: [] as Array<ICard>,\r\n    players: [] as Array<IPlayer>,\r\n    turn: 0,\r\n    round: 0,\r\n    currentPlayer: 0,\r\n    isFinished: true,\r\n    loggedItems: [],\r\n    isLoading: false,\r\n    error: ''\r\n};\r\n\r\nexport const resetServerState = () => {\r\n    if (!enableServerLog)\r\n        return;\r\n    fetch(`${apiHost}/api/Mau/Reset`)\r\n        .then(response => response.json())\r\n        .then((e) => {\r\n            console.log(e);\r\n        })\r\n        .catch(e => {\r\n            throw(e);\r\n        });\r\n}\r\nexport const updateServerState = (state: IGameState) => {\r\n    if (!enableServerLog)\r\n        return;\r\n    fetch(`${apiHost}/api/Mau/UpdateState`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(state)\r\n    })\r\n        .catch(e => {\r\n            throw(e);\r\n        });\r\n}\r\n\r\nexport const getLastCardInBurnedStack = (cards: Array<ICard>): ICard => {\r\n    if (cards.length > 0)\r\n        return cards[cards.length - 1];\r\n    else throw (new Error('There is no card in burned stack.'));\r\n}\r\n\r\nexport const getTotalCards = (state: IGameState): number => {\r\n    let total = state.drawStack.length + state.burnedStack.length;\r\n    state.players.forEach(player => total += player.cards.length);\r\n    return total;\r\n}\r\n\r\nexport const getGameStatus = (state: IGameState): string => {\r\n    if (state.drawStack.length === 0 && state.players.length > 0) {\r\n        return 'No more cards in Draw Stack';\r\n    } else if (state.isFinished && state.players.length > 0) {\r\n        let status = 'Finished.';\r\n        state.players.forEach(p => {\r\n            if (!p.cards || p.cards.length === 0) {\r\n                status = `${p.name} Wins this Game`;\r\n            }\r\n        });\r\n        return status;\r\n    } else if (state.players.length > 0) {\r\n        return `${getCurrentPlayer(state).name}'s turn`;\r\n    } else return '';\r\n}\r\n\r\nexport const getLastActionType = (state: IGameState) => {\r\n    if (state.loggedItems && state.loggedItems.length > 0)\r\n        return state.loggedItems[state.loggedItems.length - 1].action;\r\n    else return \"\";\r\n}\r\n\r\nexport const getCurrentPlayer = (state: IGameState) => state.players[state.currentPlayer];","import React from \"react\";\n\n\ninterface Props {\n  className?: string;\n}\n\n// export const CardBackground = (props:Props) => (<svg className=\"deck-card\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 208 303\">\n//   <clipPath id=\"r\"><rect x=\".5\" y=\".5\" width=\"207\" height=\"302\" rx=\"8\" /></clipPath>\n//   <g clipPath=\"url(#r)\">\n//     <path fill=\"#FFF\" d=\"m0,0h208v303H0\" />\n//     <path stroke=\"#fb0f0c\" strokeWidth=\"430\" strokeDasharray=\"16.67\" d=\"m0,294 306-303\" />\n//   </g>\n//   <rect stroke=\"#000\" strokeWidth=\".5\" x=\".5\" y=\".5\" width=\"207\" height=\"302\" rx=\"8\" fill=\"none\" />\n// </svg>);\n\nexport const CardBackground = (props:Props) => (<svg className=\"deck-card\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 167 243\" version=\"1\">\n  <g fill=\"#fb0f0c\" stroke=\"#000\">\n    <path d=\"M167 236c0 4-3 7-7 7H7c-4 0-7-3-7-7V7c0-4 3-7 7-7h153c4 0 7 3 7 7v229z\" fill=\"#fff\" stroke=\"none\"/>\n    <path d=\"M28 32h103l9 1v176H28v-5-49V38v-6\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M62 96h44v51H62V97v-1\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 91l-13 15-9 11-4 4 4 5 9 11 13 15a95900 95900 0 0 1 21-26c1 0 5-3 5-5l-4-4-9-11-13-15\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M64 98h38c2 0 2 1 2 3v42c0 2-2 2-4 2H65c-2 0-1-1-1-3V98\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 94l-12 13-9 10-3 4 3 5 8 9 13 14 11-13 9-10 4-5-4-4-8-9-12-14\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M68 103h26c1 0 6-1 6 1v36H73c-1 0-5 1-5-1v-11-25\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 98l-10 12-7 8-3 3 3 4 7 8 10 12 10-12 6-8 4-4-3-3-7-8-10-12\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M70 105h25c3 0 3 1 3 4v28c0 2-6 1-7 1H75c-2 0-5 1-5-1v-32\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 101l-9 10-6 7-3 3 2 3 6 8 10 10 8-10 7-7 3-4-3-2-6-8-9-10\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 103l-8 9-6 6-2 3 2 3 5 6 9 10 7-9 6-6 3-4-3-2-5-7-8-9\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M72 108h24v27H72v-2-16-9\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 108l-6 7-4 4-2 2 2 3 4 4 6 7 6-7 4-4 2-3-2-2-4-4-6-7\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M114 94h-4l4 4v-4M114 101l-4-5v5h4M54 94h4l-4 4v-4M54 101l4-5v5h-4M58 142h-4l4 5v-5M58 149l-4-4v4h4M110 142h4l-4 5v-5M110 149l4-4v4h-4M58 126h-4l4 5v-5M58 133l-4-5v5h4M54 110h4l-4 5v-5M54 117l4-5v5h-4M114 110h-4l4 5v-5M114 117l-4-5v5h4M110 126h4l-4 5v-5M110 133l4-5v5h-4\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M70 25l-3-7c0-2 0-6 2-7 3-1 3 3 3 5l-2 7v2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M70 25l-6-3c-2-2-4-5-3-7 2-2 5 0 6 2l2 7 1 1M70 25l6-3c1-2 4-5 2-7-1-2-4 0-5 2-2 2-2 5-3 7v1M65 25c-2-1-4 0-5 1s-1 4 1 3l1-1 3-1h3l-3-2M75 25c1-1 3 0 4 1s1 4-1 3l-1-1-2-1h-4l4-2M68 29c1 2 4 1 2-1-1-2-1-1-2 1M98 25l-3-7c0-2 0-6 2-7 3-1 3 3 3 5l-2 7v2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M98 25l-6-3c-2-2-4-5-3-7 2-2 5 0 6 2l2 7 1 1M98 25l6-3c1-2 4-5 2-7-1-2-4 0-5 2-2 2-2 5-3 7v1M93 25c-2-1-4 0-5 1s-1 4 1 3l1-1 3-1h3l-3-2M103 25c1-1 3 0 4 1s1 4-1 3l-1-1-2-1h-4l4-2M96 29c1 2 4 1 2-1-1-2-1-1-2 1M126 25l-2-7c-1-2-1-6 1-7 3-1 3 3 3 5l-2 7v2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M126 25l-6-3c-2-2-4-5-3-7 2-2 5 0 6 2l3 7v1M126 25l6-3c1-2 4-5 2-7-1-2-4 0-5 2-2 2-2 5-3 7v1M121 25c-2-1-4 0-5 1s-1 4 1 3l1-1 3-1h3l-3-2M131 25c1-1 3 0 4 1s1 4-1 3l-1-1-2-1h-4l4-2M124 29c1 2 4 1 2-1-1-2-1-1-2 1M42 25l-3-7c0-2 0-6 2-7 3-1 3 3 3 5l-2 7v2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M42 25l-6-3c-2-2-4-5-3-7 2-2 5 0 6 2l2 7 1 1M42 25l6-3c1-2 4-5 2-7-1-2-4 0-5 2-2 2-2 5-3 7v1M37 25c-2-1-4 0-5 1s-1 4 1 3l1-1 3-1h3l-3-2M47 25c1-1 3 0 4 1s1 4-1 3l-1-1-3-1h-3l4-2M40 29c1 2 4 1 2-1-1-2-1-1-2 1M69 217l-2 6c0 2-1 7 2 8 2 1 3-3 3-5l-2-7-1-2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M69 217l-6 3c-1 1-4 5-2 7 1 2 4 0 5-2 2-2 2-5 3-7v-1M69 217l6 3c2 1 5 5 3 7-1 2-4 0-5-2-2-2-3-5-3-7l-1-1M64 217l-4-1c-1-1-1-4 1-4l1 2 3 1h3l-4 2M75 217l4-1c1-1 1-4-1-4l-1 2-3 1h-3l4 2M68 212c0-2 4-1 2 2-1 2-2 0-2-2M97 217l-2 6c0 2-1 7 2 8 2 1 3-3 3-5l-2-7-1-2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M97 217l-6 3c-1 1-4 5-2 7 1 2 4 0 5-2 2-2 3-5 3-7v-1M97 217l7 3c1 1 4 5 2 7-1 2-4 0-5-2-2-2-3-5-3-7l-1-1M92 217l-4-1c-1-1-1-4 1-4l1 2 3 1h3l-4 2M103 217l4-1c1-1 1-4-1-4l-1 2-3 1h-3l4 2M96 212c0-2 4-1 2 2-1 2-2 0-2-2M125 217l-2 6c0 2-1 7 2 8 2 1 3-3 3-5l-2-7-1-2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M125 217l-6 3c-1 1-4 5-2 7 1 2 4 0 5-2 2-2 3-5 3-7v-1M125 217l7 3c1 1 4 5 2 7-1 2-4 0-5-2-2-2-3-5-3-7l-1-1M120 217l-4-1c-1-1-1-4 1-4l1 2 3 1h3l-4 2M131 217l4-1c1-1 1-4-1-4l-1 2-3 1h-3l4 2M124 212c0-2 4-1 2 2-1 2-2 0-2-2M41 217l-2 6c0 2-1 7 2 8 2 1 3-3 3-5l-2-7-1-2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M41 217l-6 3c-1 1-4 5-2 7 1 2 4 0 5-2 2-2 2-5 3-7v-1M41 217l6 3c2 1 5 5 3 7-1 2-4 0-5-2-2-2-3-5-3-7l-1-1M36 217l-4-1c-1-1-1-4 1-4l1 2 3 1h3l-4 2M47 217l4-1c1-1 1-4-1-4l-1 2-3 1h-3l4 2M40 212c0-2 4-1 2 2-1 2-2 0-2-2M147 219l6 2c2 1 5 0 6-2 0-3-4-4-5-3-3 0-5 1-7 3M146 219c1 2 4 12 8 10 3-1 1-5 0-6l-7-4h-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 219c1-3 4-13 8-11 3 2 1 5 0 7l-7 3-1 1M146 225c1 1 1 4-1 5-1 1-3 1-3-1l2-1v-4l1-4 1 5M146 213c1-2 1-4-1-6-1 0-3 0-3 2l2 1v3l1 4 1-4M142 220c-1 0-1-4 2-2 1 1 0 2-2 2M147 186c1 1 3 3 6 3 2 1 5 0 6-2 0-3-4-4-5-4-3 0-5 2-7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 186c1 3 4 13 8 10 3-1 1-4 0-6-2-2-5-3-7-3l-1-1M146 186c1-2 4-12 8-10 3 1 1 5 0 6l-7 4h-1M146 192c1 2 1 4-1 6-1 0-3 0-3-2l2-1v-3l1-4 1 4M146 180c1-1 1-4-1-5-1-1-3-1-3 1l2 1v4l1 4 1-5M142 188c-1-1-1-5 2-3 1 2 0 3-2 3M147 154l6 3c2 0 5 0 6-3 0-2-4-3-5-3-3 0-5 2-7 3M146 154c1 2 4 12 8 10 3-1 1-5 0-6l-7-4h-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 154c1-3 4-13 8-10 3 1 1 5 0 6l-7 4h-1M146 160c1 1 1 4-1 5-1 1-3 1-3-1l2-1v-4l1-4 1 5M146 148c1-2 1-4-1-5-1-1-3-1-3 1l2 1v3l1 4 1-4M142 155c-1 0-1-4 2-2 1 1 0 2-2 2M147 89l6 3c2 0 5 0 6-3 0-2-4-3-5-3-3 0-5 2-7 3M146 89c1 3 4 13 8 10 3-1 1-5 0-6l-7-4h-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 89c1-3 4-13 8-10 3 1 1 5 0 6l-7 4h-1M146 95c1 2 1 4-1 5-1 1-3 1-3-1l2-1v-4l1-3 1 4M146 83c1-2 1-4-1-5-1-1-3-1-3 1l2 1v3l1 5 1-5M142 91c-1-1-1-5 2-3 1 1 0 2-2 3M147 57l6 2c2 1 5 0 6-2 0-3-4-4-5-3l-7 2v1M146 57c1 2 4 12 8 10 3-1 1-5 0-6l-7-4h-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 57c1-3 4-13 8-11 3 2 1 5 0 7l-7 3-1 1M146 63c1 1 1 4-1 5-1 1-3 1-3-1l2-1v-4l1-4 1 5M146 51c1-2 1-4-1-6-1 0-3 0-3 2l2 1v3l1 4 1-4M142 58c-1 0-1-4 2-2 1 1 0 2-2 2M147 24l6 3c2 1 5 0 6-3 0-2-4-3-5-3-3 0-5 2-7 3M146 24c1 3 4 13 8 10 3-1 1-5 0-6l-7-4h-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 24c1-2 4-12 8-10 3 1 1 5 0 6l-7 4h-1M146 30c1 2 1 4-1 6-1 0-3 0-3-2l2-1v-3l1-4 1 4M146 18c1-1 1-4-1-5-1-1-3-1-3 1l2 1v4l1 4 1-5M142 26c-1-1-1-5 2-3 1 2 0 2-2 3M147 121c1 1 3 3 6 3 2 1 5 0 6-2 0-3-4-4-5-4l-7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M146 121c1 3 4 13 8 11 3-2 1-5 0-7l-7-3-1-1M146 121c1-2 4-12 8-10 3 1 1 5 0 6l-7 4h-1M146 127c1 2 1 5-1 6-1 1-3 0-3-1l2-2v-3l1-4 1 4M146 116c1-2 1-5-1-6-1-1-3 0-3 1l2 1v4l1 4 1-4M142 123c-1 0-1-4 2-2 1 1 0 2-2 2M21 219l-6 2c-2 1-6 0-6-2-1-3 3-4 5-3 2 0 5 1 7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 219c-1 2-4 12-8 10-2-1-1-5 1-6 1-2 4-3 6-4h1M21 219c-1-3-4-13-8-11-2 2-1 5 1 7l6 3 1 1M21 225l1 5c1 1 4 1 3-1l-2-1v-4-4l-2 5M21 213l1-6c1 0 4 0 3 2l-2 1v7l-2-4M25 220c2 0 1-4-2-2-1 1 0 2 2 2M21 186l-6 3c-2 1-6 0-6-2 0-3 3-4 5-4l7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 186c-1 3-4 13-8 10-2-1-1-4 1-6 1-2 4-3 6-3l1-1M21 186c-1-2-4-12-8-10-2 1-1 5 1 6 1 2 4 3 6 4h1M21 192l1 6c1 0 4 0 3-2l-2-1v-3-4l-2 4M21 180l1-5c1-1 4-1 3 1l-2 1v8l-2-5M25 188c2-1 1-5-2-3-1 2 0 3 2 3M21 154l-6 3c-2 0-6 0-6-3-1-2 3-3 5-3l7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 154c-1 2-4 12-8 10-2-1-1-5 1-6 1-2 4-3 6-4h1M21 154c-1-3-4-13-8-10-2 1-1 5 1 6 1 2 4 3 6 4h1M21 160l1 5c1 1 4 1 3-1l-2-1v-4-4l-2 5M21 148l1-5c1-1 4-1 3 1l-2 1v7l-2-4M25 155c2 0 1-4-2-2-1 1 0 2 2 2M21 89l-6 3c-2 0-6 0-6-3-1-2 3-3 5-3l7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 89c-1 3-4 13-8 10-2-1-1-5 1-6 1-2 4-3 6-4h1M21 89c-1-3-4-13-8-10-2 1-1 5 1 6 1 2 4 3 6 4h1M21 95l1 5c1 1 4 1 3-1l-2-1v-4-3l-2 4M21 83l1-5c1-1 4-1 3 1l-2 1v8l-2-5M25 91c2-1 1-5-2-3-1 1 0 2 2 3M21 57l-6 2c-2 1-6 0-6-2 0-3 3-4 5-3l7 2v1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 57c-1 2-4 12-8 10-2-1-1-5 1-6 1-2 4-3 6-4h1M21 57c-1-3-4-13-8-11-2 2-1 5 1 7l6 3 1 1M21 63l1 5c1 1 4 1 3-1l-2-1v-4-4l-2 5M21 51l1-6c1 0 4 0 3 2l-2 1v7l-2-4M25 58c2 0 1-4-2-2-1 1 0 2 2 2M21 24l-6 3c-2 1-6 0-6-3-1-2 3-3 5-3l7 3\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 24c-1 3-4 13-8 10-2-1-1-5 1-6 1-2 4-3 6-4h1M21 24c-1-2-4-12-8-10-2 1-1 5 1 6 1 2 4 3 6 4h1M21 30l1 6c1 0 4 0 3-2l-2-1v-3-4l-2 4M21 18l1-5c1-1 4-1 3 1l-2 1v8l-2-5M25 26c2-1 1-5-2-3-1 2 0 2 2 3M21 121l-6 3c-2 1-6 0-6-2-1-3 3-4 5-4l7 3M21 121c-1 3-4 13-8 11-2-2-1-5 1-7l6-3 1-1\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M21 121c-1-2-4-12-8-10-2 1-1 5 1 6 1 2 4 3 6 4h1M21 127l1 6c1 1 4 0 3-1l-2-2v-3-4l-2 4M21 116l1-6c1-1 4 0 3 1l-2 1v8l-2-4M25 123c2 0 1-4-2-2-1 1 0 2 2 2\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M73 147\" fill=\"none\" stroke=\"none\"/>\n    <path d=\"M76 112h16v19H76v-19\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M77 116l2-3 1 4-3-1M89 113l2 3-3 1 1-4M89 130l2-3-3-1 1 4M79 130l-2-3 3-1-1 4\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M84 112l-2 7-6 2 6 3 2 7 2-7 6-3-6-2-2-7M133 116l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M133 99l-1 5-4 1 4 2 1 4 1-4 4-2-4-1-1-5M133 132l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M119 116l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M119 99l-1 5-4 1 4 2 1 4 1-4 4-2-4-1-1-5M119 132l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M91 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M105 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M63 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M133 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M119 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M91 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M105 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M63 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M133 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M119 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M91 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M77 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M105 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M63 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M133 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M119 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M91 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M105 148l-1 5-4 1 4 1a7526 7526 0 0 0 2 0l4-1-4-1-1-5M63 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M133 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M119 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M63 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M105 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M91 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M63 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M91 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M105 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M133 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M133 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M119 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M119 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M77 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M63 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M105 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M91 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M63 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M77 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M91 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M105 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M133 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M133 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M119 51l-1 4-4 2 4 1a7526 7526 0 0 0 2 0l4-1-4-2-1-4M119 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M35 132l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M35 116l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M35 99l-1 5-4 1 4 2 1 4 1-4 4-2-4-1-1-5M35 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M35 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M35 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M35 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M35 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M35 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M35 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M35 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M49 132l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M49 116l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M49 99l-1 5-4 1 4 2 1 4 1-4 4-2-4-1-1-5M49 163l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M49 179l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M49 196l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4M49 148l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M49 83l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M49 67l-1 5-4 1 4 1 1 5 1-5 4-1-4-1-1-5M49 51l-1 4-4 2 4 1 1 4 1-4 4-1-4-2-1-4M49 35l-1 4-4 1 4 2 1 4 1-4 4-2-4-1-1-4\" fill=\"#fff\" fillRule=\"evenodd\" stroke=\"none\"/>\n    <path d=\"M8 7c-2 0-1 6-1 7v216c0 2-1 6 2 6h149c3 0 2-3 2-5v-15-55V33 15 8c0-3-8-1-10-1H8\" fill=\"none\" stroke=\"#fb0f0c\" strokeMiterlimit=\"10\" transform=\"matrix(1 0 0 1.003 0 0)\"/>\n  </g>\n</svg>);\n\n","import React, { CSSProperties } from \"react\";\nimport { ICard, rankLetterMap, getCardTypeProps } from \"../model/Card\";\nimport { CardBackground } from \"./CardBackground\";\n\ninterface Props {\n  className?: string;\n  card: ICard;\n  hide?: boolean;\n  onCardSelected?: () => void;\n  rotate?: number;\n}\n\nconst valueProps = (color: string, scale = 1) => ({\n  fontSize: 34,\n  fontWeight: 500,\n  textAnchor: 'middle',\n  dominantBaseline: 'middle',\n  fill: color,\n  transform: `scale(${scale})`\n})\n\nexport function Card(props: Props) {\n  const { color, text } = getCardTypeProps(props.card.suit);\n  const _rank = rankLetterMap[props.card.rank];\n\n  const getStyleFromRotate = (rotate?: number) : CSSProperties | undefined => {\n    if (!props.rotate)\n      return undefined;\n    return { transform: `rotateZ(${rotate || 0}deg)` }\n  }\n\n  if (props.hide)\n    return <CardBackground className={props.className} />;\n\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" style={getStyleFromRotate(props.rotate)} onClick={props.onCardSelected} viewBox=\"0 0 180 250\" className={`deck-card ${props.className}`}>\n      <text x=\"25\" y=\"30\" {...valueProps(color)} >\n        {_rank}\n      </text>\n      <text x=\"25\" y=\"60\" {...valueProps(color)} >\n        {text}\n      </text>\n      <text x=\"90\" y=\"125\" {...valueProps(color)} fontSize={128} >\n        {text}\n      </text>\n      <text x=\"-155\" y=\"-220\" {...valueProps(color, -1)} >\n        {_rank}\n      </text>\n      <text x=\"-155 \" y=\"-190\" {...valueProps(color, -1)} >\n        {text}\n      </text>\n    </svg>\n  );\n}\n","import React, { useState } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { initializeStartState } from '../methods/GameMethods';\nimport { Card } from './Card';\nimport { Link } from 'react-router-dom';\n\n\nexport const Home = withRouter((props: RouteComponentProps<{}>) => {\n\n  const [gameState, set_gameState] = useState(initializeStartState());\n\n  const getRotationZ = (i: number, n: number) => (30 / (n - 1)) * i - 15;\n\n  const reinitialize = () => set_gameState(initializeStartState());\n\n  // useEffect(() => {\n  //   debugger;\n  //   ReactGA.pageview(window.location.pathname + window.location.search);\n  // }, []);\n\n  return (\n    <div id=\"game-table\">\n      <h1>Mau Mau</h1>\n      <h5>in ReactJs &amp; dotnet Core</h5>\n      <h3>by Gorancho Sirkarovski</h3>\n      <br />\n      <div className=\"button-group\">\n        <Link to='/test'>Deck Test</Link>\n        <br />\n        <Link to='basic'>Basic Demo</Link>\n        <Link to='/advanced' >Advanced Demo</Link>\n        <br />\n        <Link to='/game'>Play Game</Link>\n        <br />\n        <Link to='/spectator' className=\"button\">Spectator</Link>\n\n        <div className=\"intro-cards\">\n          {gameState.players[0].cards.map((c, i) =>\n            <Card card={c} key={c.rank + c.suit} rotate={getRotationZ(i, gameState.players[0].cards.length)} />\n          )}\n        </div>\n        <button onClick={reinitialize} >Draw Cards</button>\n      </div>\n      <a href=\"https://github.com/cucko/MauMauSource\" className=\"github\"><img width=\"149\" height=\"149\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149\" className=\"attachment-full size-full\" alt=\"Fork me on GitHub\" /></a>\n    </div>\n  )\n})\n\n","import React, { Component } from \"react\";\n\nexport class Layout extends Component {\n\n  public render() {\n    return (\n        <div className=\"container\">\n          {this.props.children}\n        </div>\n    );\n  }\n}\n","import * as React from 'react';\r\nimport { IPlayer } from '../model/Player';\r\nimport { ICard } from '../model/Card';\r\nimport { Card } from './Card';\r\n\r\ninterface Props {\r\n    currentCard: ICard,\r\n    selected: boolean,\r\n    player: IPlayer,\r\n    onCardSelected?: (card: ICard) => void;\r\n    onDrawCardFromPile?: () => void;\r\n}\r\n\r\nexport function Player(props: Props) {\r\n\r\n    const isPlayable = (card: ICard) => {\r\n        if (card.rank === props.currentCard.rank || card.suit === props.currentCard.suit)\r\n            return \"\";\r\n        else\r\n            return \"disabled\";\r\n    }\r\n    const { cards } = props.player;\r\n    return <div className={`player player-${props.player.id} ${props.selected ? 'selected' : ''} ${(!cards || cards.length === 0) ? 'success' : ''}`}>\r\n        <div className=\"header\">{props.player.name}</div>\r\n        <div className=\"cards\">\r\n            {cards && cards.map(card => <Card hide={props.player.cpu} onCardSelected={() => props.onCardSelected && props.onCardSelected(card)} className={isPlayable(card)} key={`${card.rank} ${card.suit}`} card={card} />)}\r\n        </div>\r\n        {cards && cards.length === 1 && <div className=\"warning\">Only one card left</div>}\r\n        {(!cards || cards.length === 0) && <div className=\"success\">Winner</div>}\r\n    </div>;\r\n}","import React, { ReactNode } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport { getHasCpuPlayers } from \"../config/gameConfig\";\n\ninterface InnerProps {\n  onStartGame?: (automatic: boolean) => void;\n  toggleAutoplay?: (automatic: boolean) => void;\n  onNextTurn?: () => void;\n  autoPlay: boolean;\n  delay: number;\n  showStartButtons?: boolean;\n  onGenerateDeck?: () => void;\n  onDelayChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  children?: ReactNode\n}\n\n\ntype Props = InnerProps & RouteComponentProps<{}>;\nexport const Header = withRouter((props: Props) => {\n\n  const startGameButtons = () => {\n    if (getHasCpuPlayers())\n      return <div>\n        <button onClick={() => props.onStartGame && props.onStartGame(true)}>Start</button>\n      </div>;\n    else\n      return <div>\n        <button onClick={() => props.onStartGame && props.onStartGame(false)}>Manual</button>\n        <button onClick={() => props.onStartGame && props.onStartGame(true)}>Auto</button>\n      </div>;\n  }\n\n  const inGameButtons = () => {\n    if (props.autoPlay) {\n      return !getHasCpuPlayers() ?\n        <div>\n          <button onClick={props.onNextTurn} id=\"doTurn\" hidden>1 Turn</button>\n          <button onClick={() => props.toggleAutoplay && props.toggleAutoplay(false)}>Pause</button>\n        </div>\n        : <button onClick={props.onNextTurn} id=\"doTurn\" hidden>1 Turn</button>;\n    }\n    else {\n      return <div>\n        <button onClick={props.onNextTurn} id=\"doTurn\">1 Turn</button>\n        <button onClick={() => props.toggleAutoplay && props.toggleAutoplay(true)}>Continue</button>\n      </div>;\n    }\n  }\n\n  const type = props.location.pathname.substr(1);\n\n  const onHomeClick = () => props.history.goBack();\n\n  return <header>\n    <h1 onClick={onHomeClick}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\" /><path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" /></svg>\n      <span>{`Mau Mau ${type}`}</span></h1>\n    <div className=\"actions\">\n      <div className=\"home-buttons\">\n        {props.children ? props.children :\n          (props.showStartButtons === true ?\n            startGameButtons() :\n            inGameButtons()\n          )}\n        {props.autoPlay && <div className=\"autoPlayOptions\">\n          <div className=\"autoPlayValue\">Delay: <strong>{props.delay}</strong>ms</div>\n          <input type=\"range\" max=\"5000\" step=\"10\" min=\"30\" value={props.delay} onChange={props.onDelayChange} />\n        </div>}\n      </div>\n    </div>\n\n  </header>\n})\n","import { KnownAction, IGameState } from \"../model/Game\";\r\nimport { ICard, cardToString } from \"../model/Card\";\r\nimport { apiHost } from \"../config/gameConfig\";\r\nimport { initializeStartState, createLogItem, getCurrentPlayer, updateServerState } from \"../methods/GameMethods\";\r\n\r\n\r\nexport const gameReducer = (state: IGameState, action: KnownAction): IGameState => {\r\n    const player = getCurrentPlayer(state);\r\n    const { card } = action;\r\n    switch (action.type) {\r\n        case 'BURN':\r\n            // check if the player has the card\r\n            if (!player.cards.find(c => c === card))\r\n                return {\r\n                    ...state,\r\n                    error: `${player.name} doesn't have ${cardToString(card)}`\r\n                }\r\n            // do the turn\r\n            player.cards = player.cards.filter(c => c !== card);\r\n            // notify if one card left\r\n            const logItemsToAdd = [];\r\n            if (player.cards.length === 1)\r\n                logItemsToAdd.push(createLogItem(player, `has only one card left`, player.cards[0]))\r\n            const newstateBurn = {\r\n                ...state,\r\n                players: state.players,\r\n                burnedStack: [...state.burnedStack, card], // add card to burned stack\r\n                loggedItems: [...state.loggedItems, createLogItem(player, player.cards.length > 0 ? `burned` : `won with`, card), ...logItemsToAdd],\r\n                currentPlayer: player.cards.length === 0 ? state.currentPlayer : (state.currentPlayer + 1) % 4,\r\n                turn: player.cards.length === 0 ? state.turn : state.turn + 1,\r\n                round: player.cards.length === 0 ? state.round : ((state.turn + 1) % state.players.length) + 1,\r\n                isFinished: player.cards.length === 0\r\n            };\r\n            updateServerState(newstateBurn);\r\n            return newstateBurn;\r\n        case 'DRAW':\r\n            if (!state.drawStack.find(c => c === card))\r\n                return {\r\n                    ...state,\r\n                    error: `Draw Stack doesn't have ${cardToString(card)}`\r\n                }\r\n            else\r\n                state.drawStack.splice(0, 1); // remove the first card from draw stack\r\n            // do the turn\r\n            player.cards.push(action.card);\r\n            const newstateDraw = {\r\n                ...state,\r\n                players: [...state.players],\r\n                drawStack: state.drawStack, // no need to splice the array, getCardFromDrawStack already modified the array\r\n                loggedItems: [...state.loggedItems, createLogItem(player, `drew`, card)],\r\n                currentPlayer: (state.currentPlayer + 1) % 4,\r\n                turn: state.turn + 1,\r\n                round: ((state.turn + 1) % state.players.length) + 1,\r\n                isFinished: state.drawStack.length === 0\r\n            };\r\n            updateServerState(newstateDraw);\r\n            return newstateDraw;\r\n        case 'RESET':\r\n            return initializeStartState();\r\n\r\n        // Actions for State updates from SERVER  \r\n        case 'ERROR':\r\n            return {\r\n                ...state,\r\n                error: 'Error fetching data from server'\r\n            }\r\n        case 'FETCHING':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case 'SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.state,\r\n                isLoading: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const gameReducerApiWrapper = (dispatch: React.Dispatch<KnownAction>, state: IGameState, action: KnownAction) => {\r\n    dispatch({ type: 'FETCHING', card: {} as ICard });\r\n    try {\r\n        fetch(`${apiHost}/api/State/${action.type.toLowerCase()}?suit=${action.card.suit}&rank=${action.card.rank}`)\r\n            .then(response => response.json())\r\n            .then((newstate: IGameState) => {\r\n                newstate.loggedItems = newstate.loggedItems.map(item => ({ ...item, timestamp: new Date(item.timestamp) }));\r\n                dispatch({ type: 'SUCCESS', card: {} as ICard, state: { ...state, ...newstate } });\r\n            })\r\n            .catch(e => {\r\n                dispatch({ type: 'ERROR', card: {} as ICard });\r\n            });\r\n\r\n    } catch (e) {\r\n        dispatch({ type: 'ERROR', card: {} as ICard });\r\n    }\r\n}\r\n\r\n","import React, { useRef, useEffect } from \"react\";\nimport { cardToString } from \"../model/Card\";\nimport { ILog } from \"../model/Game\";\n\n\ninterface Props {\n  loggedItems: Array<ILog>;\n}\n\n\n\nexport function Log(props: Props) {\n  const log = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (log && log.current)\n      log.current.scrollTop = log.current.scrollHeight;\n  }, [props.loggedItems]);\n\n  return (\n    <div id=\"log\" ref={log}>\n      {!!props.loggedItems && props.loggedItems.map((l, i) =>\n        <div key={`log-item${i}`}>\n          <small>{l.timestamp.toLocaleTimeString()}</small>\n          {l.player && l.player.name} <strong className={l.action.replace(/ /g, '-')}>{l.action}</strong> {l.card && cardToString(l.card)}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IGameState } from \"../model/Game\";\nimport { getGameStatus, getTotalCards } from \"../methods/GameMethods\";\n\n\ninterface Props {\n  gameState: IGameState;\n}\n\n\n\nexport function Status(props: Props) {\n  return (\n    <div className=\"game-status\">\n      {getGameStatus(props.gameState)}\n      <div className=\"cards-status\">\n          Total cards: {getTotalCards(props.gameState)}\n        </div>\n    </div>\n\n  );\n}\n","import React from \"react\";\nimport { ICard } from \"../model/Card\";\nimport { getLastCardInBurnedStack } from \"../methods/GameMethods\";\nimport { Card } from \"./Card\";\nimport { getHasCpuPlayers } from \"../config/gameConfig\";\n\n\ninterface Props {\n  type: 'Draw' | 'Burned';\n  cards: Array<ICard> | null;\n  lastActionType: string;\n  onCardSelected?: () => void;\n}\n\n\nexport function Stack(props: Props) {\n  \n  const { cards, lastActionType, onCardSelected, type } = props;\n\n  const getClassName = (): string => {\n    if (type === 'Draw')\n      return lastActionType === 'drew' ? 'selected' : ''\n    else\n      return lastActionType === 'burned' ? 'selected' : ''\n  }\n  \n  if (!cards || cards.length === 0)\n    return null;\n  else {\n    // If there are cards in stack, get first to Draw or last in Burned\n    const card = type === 'Draw' ? cards[0] : getLastCardInBurnedStack(cards);\n    return (<div className={`${getClassName()} ${type.toLowerCase()}-stack`} onClick={onCardSelected}>\n      <div>{type} Stack<label>({cards.length} cards)</label></div>\n      <Card card={card} hide={getHasCpuPlayers() && type === 'Draw'} />\n    </div>);\n  }\n}\n","import React from 'react';\r\n\r\nexport const Loading = () => <svg viewBox=\"0 0 45 45\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#fff\">\r\n    <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(1 1)\" strokeWidth=\"2\">\r\n        <circle cx=\"22\" cy=\"22\" r=\"6\" strokeOpacity=\"0\">\r\n            <animate attributeName=\"r\"\r\n                begin=\"1.5s\" dur=\"3s\"\r\n                values=\"6;22\"\r\n                calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n            <animate attributeName=\"stroke-opacity\"\r\n                begin=\"1.5s\" dur=\"3s\"\r\n                values=\"1;0\" calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n            <animate attributeName=\"stroke-width\"\r\n                begin=\"1.5s\" dur=\"3s\"\r\n                values=\"2;0\" calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n        </circle>\r\n        <circle cx=\"22\" cy=\"22\" r=\"6\" strokeOpacity=\"0\">\r\n            <animate attributeName=\"r\"\r\n                begin=\"3s\" dur=\"3s\"\r\n                values=\"6;22\"\r\n                calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n            <animate attributeName=\"stroke-opacity\"\r\n                begin=\"3s\" dur=\"3s\"\r\n                values=\"1;0\" calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n            <animate attributeName=\"stroke-width\"\r\n                begin=\"3s\" dur=\"3s\"\r\n                values=\"2;0\" calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n        </circle>\r\n        <circle cx=\"22\" cy=\"22\" r=\"8\">\r\n            <animate attributeName=\"r\"\r\n                begin=\"0s\" dur=\"1.5s\"\r\n                values=\"6;1;2;3;4;5;6\"\r\n                calcMode=\"linear\"\r\n                repeatCount=\"indefinite\" />\r\n        </circle>\r\n    </g>\r\n</svg>","import React, { useEffect, useReducer, useState } from 'react';\nimport { getCardFromDrawStack } from '../methods/DeckMethods';\nimport { Player } from './Player';\nimport { ICard } from '../model/Card';\nimport { KnownAction } from '../model/Game';\nimport { Header } from './Header';\nimport { initialGameState, getLastCardInBurnedStack, getLastActionType, getCurrentPlayer } from '../methods/GameMethods';\nimport { findPlayableCard } from '../methods/PlayerMethods';\nimport { gameReducer, gameReducerApiWrapper } from '../reducer/gameReducer';\nimport { Log } from './Log';\nimport { Status } from './Status';\nimport { Stack } from './Stack';\nimport { useServerState, setHasCpuPlayers } from '../config/gameConfig';\nimport { Loading } from './Loading';\n\nexport const Advanced = () => {\n  setHasCpuPlayers(false);\n\n  const [autoPlay, set_autoPlay] = useState(true);\n  const [delay, set_delay] = useState(2000);\n\n\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n\n  const onStartGame = (enabled: boolean) => {\n    set_autoPlay(enabled)\n    dispatchWrapper({ type: 'RESET', card: {} as ICard });\n  }\n\n  const dispatchWrapper = (action: KnownAction) => {\n    if (useServerState)\n      gameReducerApiWrapper(dispatch, gameState, action);\n    else\n      dispatch(action);\n  }\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    if (autoPlay) {\n      timeout = setTimeout(() => {\n        if (gameState.burnedStack.length && gameState.drawStack.length && !gameState.isFinished && !gameState.isLoading)\n          (document.getElementById('doTurn') as HTMLElement).click(); // doTurn();\n      }, delay);\n    }\n\n    return () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    }\n  }, [gameState, autoPlay, delay]);\n\n\n  const doTurn = () => {\n    const player = getCurrentPlayer(gameState);\n    const playableCard = findPlayableCard(getLastCardInBurnedStack(gameState.burnedStack), player.cards);\n    if (playableCard)\n      onCardSelected(playableCard);\n    else\n      onDrawCardFromPile();\n  }\n\n\n  const onCardSelected = (card: ICard) => {\n    dispatchWrapper({ type: 'BURN', card: card });\n  }\n\n\n  const onDrawCardFromPile = () => {\n    if (gameState.isFinished)\n      return;\n    const drawedCard = getCardFromDrawStack(gameState.drawStack);\n    if (!drawedCard) {\n      alert('No more cards in pile.');\n      return;\n    }\n    dispatchWrapper({ type: 'DRAW', card: drawedCard });\n  }\n\n  const onNextTurn = () => {\n    if (!gameState.isLoading && !gameState.error)\n      doTurn();\n  }\n\n  const toggleAutoplay = (enabled: boolean) => {\n    set_autoPlay(enabled);\n    if (enabled && !gameState.isLoading && !gameState.error)\n      doTurn();\n  }\n\n  const onDelayChange = (e: React.ChangeEvent<HTMLInputElement>) => set_delay(parseInt(e.target.value));\n\n  return (\n    <div id=\"game\">\n      <Header showStartButtons={gameState.burnedStack.length === 0 || gameState.isFinished} autoPlay={autoPlay}\n        toggleAutoplay={toggleAutoplay} onDelayChange={onDelayChange} onStartGame={onStartGame} onNextTurn={onNextTurn} delay={delay} />\n\n      <div id=\"game-table\" className={gameState.isLoading ? 'loading' : ''}>\n        {gameState.burnedStack.length > 0 && gameState.players.map(player => (\n          <Player currentCard={getLastCardInBurnedStack(gameState.burnedStack)} selected={gameState.currentPlayer === player.index} key={`player-${player.id}`} player={player} onCardSelected={card => onCardSelected(card)} onDrawCardFromPile={onDrawCardFromPile} />\n        ))}\n\n        <Stack cards={gameState.drawStack} onCardSelected={onDrawCardFromPile} lastActionType={getLastActionType(gameState)} type=\"Draw\" />\n\n        <Stack cards={gameState.burnedStack} lastActionType={getLastActionType(gameState)} type=\"Burned\" />\n\n        <Log loggedItems={gameState.loggedItems} />\n\n        <div className=\"progress\">\n          Loading...\n          <Loading />\n        </div>\n\n        {gameState.error && <div id=\"error\">\n          {gameState.error}\n        </div>}\n\n        <Status gameState={gameState} />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport * as Firebase from 'firebase/app';\nimport 'firebase/database';\nimport { firebaseConfig } from \"../config/gameConfig\";\nimport { IGameState } from \"../model/Game\";\nimport { Header } from \"./Header\";\nimport { Player } from \"./Player\";\nimport { Card } from \"./Card\";\nimport { initialGameState, getLastCardInBurnedStack, getGameStatus } from \"../methods/GameMethods\";\nimport { Log } from \"./Log\";\n\nexport const Spectator = () => {\n\n    const [gameState, set_gameState] = useState(initialGameState)\n    useEffect(() => {\n        if (Firebase.apps && !Firebase.apps.length)\n            Firebase.initializeApp(firebaseConfig);\n        Firebase.database().ref('/maumau').on('child_added', snapshot => {\n            // Firebase does not return props for empty children, we reinitialize\n            const val = snapshot.val() as IGameState;\n            val.players = val.players || [];\n            val.burnedStack = val.burnedStack || [];\n            val.drawStack = val.drawStack || [];\n            val.loggedItems = val.loggedItems || [];\n            val.loggedItems = val.loggedItems.map(item => ({ ...item, timestamp: new Date(item.timestamp) }));\n            set_gameState(val as IGameState);\n        })\n        return () => {\n            Firebase.database().ref('/').off('child_added');\n        }\n    }, []);\n\n    return <div><header>\n        <h1>Mau Mau in ReactJS</h1>\n    </header>\n        <div id=\"game\">\n            <Header autoPlay={false} delay={2000}>&nbsp;</Header>\n\n            <div id=\"game-table\">\n\n                {gameState.burnedStack.length > 0 && gameState.players.map(player => (\n                    <Player currentCard={getLastCardInBurnedStack(gameState.burnedStack)} selected={gameState.currentPlayer === player.index} key={`player-${player.id}`} player={player} />\n                ))}\n\n                {gameState.drawStack.length > 0 && <div className=\"draw-stack\">\n                    <div>Draw Stack<label>({gameState.drawStack.length} cards)</label></div>\n                    <Card card={gameState.drawStack[0]} />\n                </div>}\n\n                {gameState.burnedStack.length > 0 && <div className=\"burned-stack\">\n                    <div>Burned Stack<label>({gameState.burnedStack.length} cards)</label></div>\n                    <Card card={getLastCardInBurnedStack(gameState.burnedStack)} />\n                </div>}\n\n                {gameState.error && <div id=\"error\">\n                    {gameState.error}\n                </div>}\n\n                <Log loggedItems={gameState.loggedItems} />\n\n                <div className=\"game-status\">\n                    {getGameStatus(gameState)}\n                </div>\n\n            </div>\n        </div></div>\n}\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getCardFromDrawStack } from '../methods/DeckMethods';\nimport { ICard } from '../model/Card';\nimport { KnownAction } from '../model/Game';\nimport { Header } from './Header';\nimport { initialGameState, getLastCardInBurnedStack, getCurrentPlayer } from '../methods/GameMethods';\nimport { findPlayableCard } from '../methods/PlayerMethods';\nimport { gameReducer, gameReducerApiWrapper } from '../reducer/gameReducer';\nimport { Status } from './Status';\nimport { Log } from './Log';\nimport { useServerState, setHasCpuPlayers } from '../config/gameConfig';\nimport { Loading } from './Loading';\n\nexport const Basic = () => {\n  setHasCpuPlayers(false);\n\n  const logger = useRef<HTMLDivElement>(null);\n\n  const [autoPlay, set_autoPlay] = useState(true);\n  const [delay, set_delay] = useState(2000);\n\n  // let timeout: NodeJS.Timeout;\n  // let timeoutRef = useRef<NodeJS.Timeout>(null);\n\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n\n  const onStartGame = (enabled: boolean) => {\n    set_autoPlay(enabled)\n    dispatchWrapper({ type: 'RESET', card: {} as ICard });\n  }\n\n  const dispatchWrapper = (action: KnownAction) => {\n    if (useServerState)\n      gameReducerApiWrapper(dispatch, gameState, action);\n    else\n      dispatch(action);\n  }\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (gameState.burnedStack.length && gameState.drawStack.length && !gameState.isFinished && !gameState.isLoading)\n        if (autoPlay)\n          (document.getElementById('doTurn') as HTMLElement).click();  // doTurn();\n    }, delay);\n\n    if (logger && logger.current)\n      logger.current.scrollTop = logger.current.scrollHeight;\n\n    return () => {\n      if (timeout)\n        clearTimeout(timeout);\n    }\n  }, [gameState, delay, autoPlay]);\n\n\n  const doTurn = () => {\n    const player = getCurrentPlayer(gameState);\n    const playableCard = findPlayableCard(getLastCardInBurnedStack(gameState.burnedStack), player.cards);\n    if (playableCard)\n      onCardSelected(playableCard);\n    else\n      onDrawCardFromPile();\n  }\n\n\n  const onCardSelected = (card: ICard) => {\n    dispatchWrapper({ type: 'BURN', card: card });\n  }\n\n\n  const onDrawCardFromPile = () => {\n    const drawedCard = getCardFromDrawStack(gameState.drawStack);\n    if (!drawedCard) {\n      alert('No more cards in pile.');\n      return;\n    }\n    dispatchWrapper({ type: 'DRAW', card: drawedCard });\n  }\n\n  const onNextTurn = () => {\n    if (!gameState.isLoading && !gameState.error)\n      doTurn();\n  }\n\n  const toggleAutoplay = (enabled: boolean) => {\n    set_autoPlay(enabled);\n    if (enabled && !gameState.isLoading && !gameState.error)\n      doTurn();\n    // else\n    // timeout && clearTimeout(timeout);\n  }\n\n  const onDelayChange = (e: React.ChangeEvent<HTMLInputElement>) => set_delay(parseInt(e.target.value));\n\n  return (\n    <div id=\"game-simple\">\n      <Header showStartButtons={gameState.burnedStack.length === 0 || gameState.isFinished} autoPlay={autoPlay}\n        toggleAutoplay={toggleAutoplay} onDelayChange={onDelayChange} onStartGame={onStartGame} onNextTurn={onNextTurn} delay={delay} >\n\n      </Header>\n\n      <div id=\"game-table\" className={gameState.isLoading ? 'loading' : ''}>\n        <Status gameState={gameState} />\n        <Log loggedItems={gameState.loggedItems} />\n        {gameState.error && <div id=\"error\">\n          {gameState.error}\n        </div>}\n        <div className=\"progress\">\n          Loading...\n          <Loading />\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { getCardFromDrawStack } from '../methods/DeckMethods';\nimport { Player } from './Player';\nimport { ICard } from '../model/Card';\nimport { KnownAction } from '../model/Game';\nimport { Header } from './Header';\nimport { initialGameState, getLastCardInBurnedStack, getLastActionType, getCurrentPlayer } from '../methods/GameMethods';\nimport { findPlayableCard } from '../methods/PlayerMethods';\nimport { gameReducer, gameReducerApiWrapper } from '../reducer/gameReducer';\nimport { Log } from './Log';\nimport { Status } from './Status';\nimport { Stack } from './Stack';\nimport { useServerState, setHasCpuPlayers } from '../config/gameConfig';\nimport { Loading } from './Loading';\n\nexport const Game = () => {\n  setHasCpuPlayers(true);\n\n  const [autoPlay, set_autoPlay] = useState(true);\n  const [delay, set_delay] = useState(2000);\n\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n\n  const onStartGame = (enabled: boolean) => {\n    set_autoPlay(enabled)\n    dispatchWrapper({ type: 'RESET', card: {} as ICard });\n  }\n\n  const dispatchWrapper = (action: KnownAction) => {\n    if (useServerState)\n      gameReducerApiWrapper(dispatch, gameState, action);\n    else\n      dispatch(action);\n  }\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    if (getCurrentPlayer(gameState) && getCurrentPlayer(gameState).cpu) {\n      timeout = setTimeout(() => {\n        if (gameState.burnedStack.length && gameState.drawStack.length && !gameState.isFinished && !gameState.isLoading)\n          (document.getElementById('doTurn') as HTMLElement).click(); // doTurn();\n      }, delay);\n    }\n\n    return () => {\n      if (timeout)\n        clearTimeout(timeout);\n    }\n  }, [gameState, autoPlay, delay]);\n\n\n  const doTurn = () => {\n    const player = getCurrentPlayer(gameState);\n    const playableCard = findPlayableCard(getLastCardInBurnedStack(gameState.burnedStack), player.cards);\n    if (playableCard)\n      onCardSelected(playableCard);\n    else\n      onDrawCardFromPile();\n  }\n\n\n  const onCardSelected = (card: ICard) => {\n    dispatchWrapper({ type: 'BURN', card: card });\n  }\n\n\n  const onDrawCardFromPile = () => {\n    if (gameState.isFinished)\n      return;\n    const drawedCard = getCardFromDrawStack(gameState.drawStack);\n    if (!drawedCard) {\n      alert('No more cards in pile.');\n      return;\n    }\n    dispatchWrapper({ type: 'DRAW', card: drawedCard });\n  }\n\n  const onNextTurn = () => {\n    if (!gameState.isLoading && !gameState.error)\n      doTurn();\n  }\n\n  const toggleAutoplay = (enabled: boolean) => {\n    set_autoPlay(enabled);\n    if (enabled && !gameState.isLoading && !gameState.error)\n      doTurn();\n  }\n\n  const onDelayChange = (e: React.ChangeEvent<HTMLInputElement>) => set_delay(parseInt(e.target.value));\n\n  return (\n    <div id=\"game\" className=\"play\">\n      <Header showStartButtons={gameState.burnedStack.length === 0 || gameState.isFinished} autoPlay={autoPlay}\n        toggleAutoplay={toggleAutoplay} onDelayChange={onDelayChange} onStartGame={onStartGame} onNextTurn={onNextTurn} delay={delay} />\n\n      <div id=\"game-table\" className={gameState.isLoading ? 'loading' : ''}>\n        {gameState.burnedStack.length > 0 && gameState.players.map(player => (\n          <Player currentCard={getLastCardInBurnedStack(gameState.burnedStack)} selected={gameState.currentPlayer === player.index} key={`player-${player.id}`} player={player} onCardSelected={card => onCardSelected(card)} onDrawCardFromPile={onDrawCardFromPile} />\n        ))}\n\n        <Stack cards={gameState.drawStack} onCardSelected={onDrawCardFromPile} lastActionType={getLastActionType(gameState)} type=\"Draw\" />\n\n        <Stack cards={gameState.burnedStack} lastActionType={getLastActionType(gameState)} type=\"Burned\" />\n\n        <Log loggedItems={gameState.loggedItems} />\n\n        <div className=\"progress\">\n          Loading...\n          <Loading />\n        </div>\n\n        {gameState.error && <div id=\"error\">\n          {gameState.error}\n        </div>}\n\n        <Status gameState={gameState} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card } from './Card';\nimport { generateDeck } from '../methods/DeckMethods';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { Header } from './Header';\n\n\nexport const TestDeck = withRouter((props: RouteComponentProps<{}>) => {\n\n  const [cards, set_cards] = useState(generateDeck(false));\n\n  const onGenerateDeck = () => set_cards(generateDeck(false));\n\n  useEffect(() => {\n    const getRandomCard = (): HTMLElement => {\n      const cards = document.querySelectorAll('.deck-card');\n      return cards[Math.floor(Math.random() * cards.length)] as HTMLElement;\n    }\n\n\n    const interval = setInterval(() => {\n      const c = getRandomCard();\n      c.classList.add('hover');\n      setTimeout(() => {\n        c.classList.remove('hover');\n      }, 2500);\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [cards])\n\n  return (\n    <div>\n      <Header autoPlay={false} delay={2000} onGenerateDeck={onGenerateDeck}>\n        <button onClick={onGenerateDeck} >Generate and Shuffle</button>\n      </Header>\n\n      <div className=\"deck-test\">\n        {cards.map(c =>\n          <Card key={c.rank + c.suit} card={c} />\n        )}\n      </div>\n    </div>\n  )\n})\n\n","import React, { useEffect, ComponentClass, FunctionComponent } from \"react\";\r\nimport ReactGA, { FieldsObject } from \"react-ga\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { GAtrackingID } from \"../config/gameConfig\";\r\n\r\nReactGA.initialize(GAtrackingID);\r\nexport const withTracker = <P extends RouteComponentProps>(\r\n  WrappedComponent: ComponentClass | FunctionComponent,\r\n  options: FieldsObject = {},\r\n) => {\r\n  const trackPage = (page: string) => {\r\n    ReactGA.set({ page, ...options });\r\n    ReactGA.pageview(page);\r\n  };\r\n\r\n  return (props: P) => {\r\n    useEffect(() => {\r\n      trackPage(props.location.pathname);\r\n    }, [props.location.pathname]);\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n}","import React, { Component, ComponentClass, FunctionComponent } from \"react\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport \"./css/site.scss\";\n\nimport { Home } from \"./components/Home\";\nimport { Layout } from \"./components/Layout\";\nimport { Advanced } from \"./components/Advanced\";\nimport { Spectator } from \"./components/Spectator\";\nimport { Basic } from \"./components/Basic\";\nimport { Game } from \"./components/Game\";\nimport { TestDeck } from \"./components/TestDeck\";\nimport { withTracker } from \"./components/withTracker\";\n\n\nexport default class App extends Component {\n\n  withTrackerWrapper = (Page: ComponentClass | FunctionComponent) => {\n    const Wrapper = withTracker(Page);\n    return (props: RouteComponentProps) => <Wrapper {...props} />\n  }\n  public render() {\n    return (\n      <Layout>\n        <Route exact={true} path=\"/\" component={this.withTrackerWrapper(Home)} />\n        <Route path=\"/test\" component={this.withTrackerWrapper(TestDeck)} />\n        <Route path=\"/basic\" component={this.withTrackerWrapper(Basic)} />\n        <Route path=\"/advanced\" component={this.withTrackerWrapper(Advanced)} />\n        <Route path=\"/game\" component={this.withTrackerWrapper(Game)} />\n        <Route path=\"/spectator\" component={this.withTrackerWrapper(Spectator)} />\n      </Layout>\n    );\n  }\n}\n\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport ReactGA from 'react-ga';\nimport { GAtrackingID } from \"./config/gameConfig\";\nReactGA.initialize(GAtrackingID);\n\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\") as string;\nconst rootElement = document.getElementById(\"root\");\n\n\n\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n    <App />\n  </BrowserRouter>,\n  rootElement);\n\nregisterServiceWorker();\n"],"sourceRoot":""}